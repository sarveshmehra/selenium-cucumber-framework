{
  "swagger":"2.0",
  "info":{
    "description":"Service to handle TOTP for BisnodeIDs",
    "version":"0.0.1",
    "title":"BisnodeID TOTP Service",
    "termsOfService":"https://www.bisnode.com",
    "contact":{
      "name":"Bisnode",
      "url":"https://www.bisnode.com",
      "email":"bisnodesverige.se@bisnode.com"
    },
    "license":{
      "name":"Proprietary",
      "url":"https://www.bisnode.com"
    }
  },
  "host":"sfs.stage.aws.blue.bisnode.net:443",
  "basePath":"/ims-totp-s/v1",
  "tags":[
    {
      "name":"file-import-controller",
      "description":"File Import Controller"
    },
    {
      "name":"customer-controller",
      "description":"Customer Controller"
    },
    {
      "name":"import-jobs-controller",
      "description":"Import Jobs Controller"
    },
    {
      "name":"user-controller",
      "description":"User Controller"
    },
    {
      "name":"device-controller",
      "description":"Device Controller"
    }
  ],
  "schemes":[
    "https"
  ],
  "paths":{
    "/customers":{
      "get":{
        "tags":[
          "customer-controller"
        ],
        "summary":"Get customers",
        "description":"Use query params to narrow the list returned.\nThe following query params are combinded using logical **and**:\n * contractId\n * contractIdType\n\nUse the **match** to control how to perform matching in database.",
        "operationId":"getCustomersUsingGET",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"contractId",
            "in":"query",
            "description":"Find by contractId",
            "required":false,
            "type":"string"
          },
          {
            "name":"contractIdType",
            "in":"query",
            "description":"Find by contractIdType",
            "required":false,
            "type":"string"
          },
          {
            "name":"match",
            "in":"query",
            "description":"Search matching",
            "required":false,
            "type":"string",
            "default":"EXACT"
          },
          {
            "name":"page",
            "in":"query",
            "description":"Requested page number (zero indexed)",
            "required":false,
            "type":"integer",
            "default":0,
            "format":"int32"
          },
          {
            "name":"size",
            "in":"query",
            "description":"Requested page size",
            "required":false,
            "type":"integer",
            "default":10,
            "format":"int32"
          },
          {
            "name":"sortBy",
            "in":"query",
            "description":"Sort result by",
            "required":false,
            "type":"string",
            "default":"UPDATED_AT",
            "enum":[
              "UPDATED_AT",
              "CREATED_AT",
              "STATE"
            ]
          },
          {
            "name":"sortOrder",
            "in":"query",
            "description":"Sort order",
            "required":false,
            "type":"string",
            "default":"DESC",
            "enum":[
              "ASC",
              "DESC"
            ]
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«GetCustomersResponseData»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      },
      "post":{
        "tags":[
          "customer-controller"
        ],
        "summary":"Insert a new customer",
        "operationId":"insertCustomerUsingPOST",
        "consumes":[
          "application/json;charset=UTF-8"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "in":"body",
            "name":"customerCreate",
            "description":"customerCreate",
            "required":true,
            "schema":{
              "$ref":"#/definitions/CustomerCreate"
            }
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«Customer»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      }
    },
    "/customers/{id}":{
      "get":{
        "tags":[
          "customer-controller"
        ],
        "summary":"Fetch a Customer",
        "operationId":"getCustomerUsingGET",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"id",
            "required":true,
            "type":"string"
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«Customer»"
            }
          },
          "400":{
            "description":"Bad Request"
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not Found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      },
      "put":{
        "tags":[
          "customer-controller"
        ],
        "summary":"Update an existing customer",
        "operationId":"updateCustomerUsingPUT",
        "consumes":[
          "application/json;charset=UTF-8"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "in":"body",
            "name":"customerUpdate",
            "description":"customerUpdate",
            "required":true,
            "schema":{
              "$ref":"#/definitions/CustomerUpdate"
            }
          },
          {
            "name":"id",
            "in":"path",
            "description":"id",
            "required":true,
            "type":"string"
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«Customer»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      },
      "delete":{
        "tags":[
          "customer-controller"
        ],
        "summary":"Delete an existing customer",
        "operationId":"deleteCustomerUsingDELETE",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"id",
            "required":true,
            "type":"string"
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«Customer»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      }
    },
    "/devices":{
      "get":{
        "tags":[
          "device-controller"
        ],
        "summary":"Get devices",
        "description":"Use query params to narrow the list returned.\nThe following query params are combinded using logical **and**:\n * serialNumber\n * manufacturer\n * model\n * contractId\n\nUse the **match** to control how to perform matching in database.",
        "operationId":"getDevicesUsingGET",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"serialNumber",
            "in":"query",
            "description":"Find by serialNumber",
            "required":false,
            "type":"string"
          },
          {
            "name":"manufacturer",
            "in":"query",
            "description":"Find by manufacturer",
            "required":false,
            "type":"string"
          },
          {
            "name":"model",
            "in":"query",
            "description":"Find by model",
            "required":false,
            "type":"string"
          },
          {
            "name":"contractId",
            "in":"query",
            "description":"Find by contractId",
            "required":false,
            "type":"string"
          },
          {
            "name":"contractIdType",
            "in":"query",
            "description":"Find by contractId Type",
            "required":false,
            "type":"string"
          },
          {
            "name":"state",
            "in":"query",
            "description":"Find by state",
            "required":false,
            "type":"string",
            "enum":[
              "VACANT",
              "ACTIVE",
              "DISABLED",
              "LOST",
              "DISCONTINUED"
            ]
          },
          {
            "name":"match",
            "in":"query",
            "description":"Search matching",
            "required":false,
            "type":"string",
            "default":"EXACT",
            "enum":[
              "EXACT",
              "CONTAINS",
              "STARTSWITH"
            ]
          },
          {
            "name":"page",
            "in":"query",
            "description":"Requested page number (zero indexed)",
            "required":false,
            "type":"integer",
            "default":0,
            "format":"int32"
          },
          {
            "name":"size",
            "in":"query",
            "description":"Requested page size",
            "required":false,
            "type":"integer",
            "default":10,
            "format":"int32"
          },
          {
            "name":"sortBy",
            "in":"query",
            "description":"Sort result by",
            "required":false,
            "type":"string",
            "default":"UPDATED_AT",
            "enum":[
              "UPDATED_AT",
              "CREATED_AT",
              "STATE"
            ]
          },
          {
            "name":"sortOrder",
            "in":"query",
            "description":"Sort order",
            "required":false,
            "type":"string",
            "default":"DESC",
            "enum":[
              "ASC",
              "DESC"
            ]
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«GetDevicesResponseData»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      },
      "post":{
        "tags":[
          "device-controller"
        ],
        "summary":"Insert a new Device",
        "description":"Inserts a new Device into the database, without further processing. This method should primarily be used by integration tests.",
        "operationId":"insertDeviceUsingPOST",
        "consumes":[
          "application/json;charset=UTF-8"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "in":"body",
            "name":"deviceCreate",
            "description":"deviceCreate",
            "required":true,
            "schema":{
              "$ref":"#/definitions/DeviceCreate"
            }
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«Device»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      }
    },
    "/devices/{deviceId}/{fieldName}/{fieldValue}":{
      "put":{
        "tags":[
          "device-controller"
        ],
        "summary":"Set the value of a property on a given device",
        "description":"**How to use the path parameters**\n\nAllowed values:\n* deviceId must conform to java.util.UUID string format\n* fieldName must be one of manufacturer, serialNumber, model, state or userId.\n* fieldValue is dependent on what kind of field it is.\n* deviceId and userId must conform to UUID\n* for fieldValues, the string 'null' semantically implies null.\n* null is not allowed for manufacturer, serialNumber, model and state",
        "operationId":"updateDevicePropertyUsingPUT",
        "consumes":[
          "application/json;charset=UTF-8"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"deviceId",
            "in":"path",
            "description":"deviceId",
            "required":true,
            "type":"string"
          },
          {
            "name":"fieldName",
            "in":"path",
            "description":"fieldName",
            "required":true,
            "type":"string"
          },
          {
            "name":"fieldValue",
            "in":"path",
            "description":"fieldValue",
            "required":true,
            "type":"string"
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«Device»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      }
    },
    "/devices/{id}":{
      "get":{
        "tags":[
          "device-controller"
        ],
        "summary":"Fetches a Device",
        "operationId":"getDeviceUsingGET",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"id",
            "required":true,
            "type":"string"
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«Device»"
            }
          },
          "400":{
            "description":"Bad Request"
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not Found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      },
      "put":{
        "tags":[
          "device-controller"
        ],
        "summary":"Update a given Device",
        "description":"The following fields are updatable and a null value will unset the stored value: \n * customerContractId * customerContractIdType * state\nAll other fields will be ignored",
        "operationId":"updateDeviceUsingPUT",
        "consumes":[
          "application/json;charset=UTF-8"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"id",
            "required":true,
            "type":"string"
          },
          {
            "in":"body",
            "name":"deviceUpdate",
            "description":"deviceUpdate",
            "required":true,
            "schema":{
              "$ref":"#/definitions/DeviceUpdate"
            }
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«Device»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      },
      "delete":{
        "tags":[
          "device-controller"
        ],
        "summary":"Deletes a Device",
        "description":"Deletes the record from the database.",
        "operationId":"deleteDeviceUsingDELETE",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"id",
            "required":true,
            "type":"string"
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«Device»"
            }
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      }
    },
    "/imports":{
      "get":{
        "tags":[
          "import-jobs-controller"
        ],
        "summary":"Return list of import jobs",
        "operationId":"getImportjobsUsingGET",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«ImportJobs»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      },
      "post":{
        "tags":[
          "file-import-controller"
        ],
        "summary":"Import PSKC XML file",
        "operationId":"importXMLUsingPOST",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "in":"body",
            "name":"requestData",
            "description":"requestData",
            "required":true,
            "schema":{
              "$ref":"#/definitions/FileImportRequestData"
            }
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«ImportJob»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      }
    },
    "/imports/{id}":{
      "get":{
        "tags":[
          "import-jobs-controller"
        ],
        "summary":"Return a specific import jobs along with its devices",
        "operationId":"getSpecificImportjobUsingGET",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"id",
            "required":true,
            "type":"string"
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«ImportJob»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      }
    },
    "/imports/{importJobId}/file":{
      "get":{
        "tags":[
          "import-jobs-controller"
        ],
        "summary":"Get the uploaded file data of a given import",
        "operationId":"getImportjobFileUsingGET",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"importJobId",
            "in":"path",
            "description":"importJobId",
            "required":true,
            "type":"string"
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«ImportJobFile»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      }
    },
    "/users":{
      "post":{
        "tags":[
          "user-controller"
        ],
        "summary":"Insert a new user",
        "operationId":"insertUserUsingPOST",
        "consumes":[
          "application/json;charset=UTF-8"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "in":"body",
            "name":"userCreate",
            "description":"userCreate",
            "required":true,
            "schema":{
              "$ref":"#/definitions/UserCreate"
            }
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«User»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      }
    },
    "/users/{id}":{
      "get":{
        "tags":[
          "user-controller"
        ],
        "summary":"Fetch a User",
        "operationId":"getUserUsingGET",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"id",
            "required":true,
            "type":"string"
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«User»"
            }
          },
          "400":{
            "description":"Bad Request"
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not Found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      },
      "put":{
        "tags":[
          "user-controller"
        ],
        "summary":"Update an existing user",
        "operationId":"updateUserUsingPUT",
        "consumes":[
          "application/json;charset=UTF-8"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "in":"body",
            "name":"userUpdate",
            "description":"userUpdate",
            "required":true,
            "schema":{
              "$ref":"#/definitions/UserUpdate"
            }
          },
          {
            "name":"id",
            "in":"path",
            "description":"id",
            "required":true,
            "type":"string"
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage«User»"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      },
      "delete":{
        "tags":[
          "user-controller"
        ],
        "summary":"Delete an existing user",
        "operationId":"deleteUserUsingDELETE",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"id",
            "required":true,
            "type":"string"
          },
          {
            "name":"Authorization",
            "in":"header",
            "description":"Authorization token",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"OK",
            "schema":{
              "$ref":"#/definitions/ResponseMessage"
            }
          },
          "400":{
            "description":"Bad request"
          },
          "500":{
            "description":"Internal Server Error"
          },
          "404":{
            "description":"Not found"
          }
        },
        "security":[
          {
            "oauth2":[
              "totp"
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions":{
    "oauth2":{
      "type":"oauth2",
      "tokenUrl":"https://stage-login.bisnode.com/as/token.oauth2",
      "flow":"application",
      "scopes":{
        "totp":""
      }
    }
  },
  "definitions":{
    "ImportJobs":{
      "type":"object",
      "properties":{
        "importJobs":{
          "type":"array",
          "description":"The set of import jobs",
          "items":{
            "$ref":"#/definitions/ImportJob"
          }
        }
      },
      "description":"An object with a set of import jobs"
    },
    "User":{
      "type":"object",
      "properties":{
        "createdAt":{
          "type":"string",
          "format":"date-time"
        },
        "devices":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/Device"
          }
        },
        "display":{
          "type":"string"
        },
        "updatedAt":{
          "type":"string",
          "format":"date-time"
        },
        "userId":{
          "type":"string"
        }
      }
    },
    "Customer":{
      "type":"object",
      "properties":{
        "contractId":{
          "type":"string"
        },
        "contractIdType":{
          "type":"string"
        },
        "createdAt":{
          "type":"string",
          "format":"date-time"
        },
        "createdBy":{
          "type":"string"
        },
        "customerId":{
          "type":"string"
        },
        "devices":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/Device"
          }
        },
        "display":{
          "type":"string"
        },
        "updatedAt":{
          "type":"string",
          "format":"date-time"
        },
        "updatedBy":{
          "type":"string"
        }
      }
    },
    "ResponseMessage«GetCustomersResponseData»":{
      "type":"object",
      "properties":{
        "data":{
          "$ref":"#/definitions/GetCustomersResponseData"
        },
        "errors":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/ErrorResponse"
          }
        }
      }
    },
    "GetDevicesResponseData":{
      "type":"object",
      "properties":{
        "devices":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/Device"
          }
        },
        "page":{
          "type":"integer",
          "format":"int32"
        },
        "returned":{
          "type":"integer",
          "format":"int32"
        },
        "size":{
          "type":"integer",
          "format":"int32"
        },
        "total":{
          "type":"integer",
          "format":"int64"
        }
      }
    },
    "ResponseMessage«Customer»":{
      "type":"object",
      "properties":{
        "data":{
          "$ref":"#/definitions/Customer"
        },
        "errors":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/ErrorResponse"
          }
        }
      }
    },
    "ResponseMessage«ImportJob»":{
      "type":"object",
      "properties":{
        "data":{
          "$ref":"#/definitions/ImportJob"
        },
        "errors":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/ErrorResponse"
          }
        }
      }
    },
    "ApiResponse":{
      "type":"object"
    },
    "UserCreate":{
      "type":"object",
      "properties":{
        "display":{
          "type":"string"
        },
        "userId":{
          "type":"string"
        }
      }
    },
    "GetCustomersResponseData":{
      "type":"object",
      "properties":{
        "customers":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/Customer"
          }
        },
        "page":{
          "type":"integer",
          "format":"int32"
        },
        "returned":{
          "type":"integer",
          "format":"int32"
        },
        "size":{
          "type":"integer",
          "format":"int32"
        },
        "total":{
          "type":"integer",
          "format":"int64"
        }
      }
    },
    "DeviceInfo":{
      "type":"object",
      "properties":{
        "manufacturer":{
          "type":"string",
          "description":"The device's manufacturer name or identifier"
        },
        "model":{
          "type":"string",
          "description":"The device's model name or identifier"
        },
        "serialNumber":{
          "type":"string",
          "description":"The device's serial number"
        }
      }
    },
    "DeviceCreate":{
      "type":"object",
      "properties":{
        "customerContractId":{
          "type":"string"
        },
        "customerContractIdType":{
          "type":"string"
        },
        "deviceId":{
          "type":"string",
          "description":"Public unique identifier of this device"
        },
        "deviceInfo":{
          "description":"Device info as received in the import XML",
          "$ref":"#/definitions/DeviceInfo"
        },
        "encryptionMethod":{
          "type":"string",
          "enum":[
            "NONE",
            "AES"
          ]
        },
        "secret":{
          "description":"The device's individual secret",
          "$ref":"#/definitions/Secret"
        },
        "state":{
          "type":"string",
          "enum":[
            "VACANT",
            "ACTIVE",
            "DISABLED",
            "LOST",
            "DISCONTINUED"
          ]
        },
        "time":{
          "type":"integer",
          "format":"int64"
        },
        "timeInterval":{
          "type":"integer",
          "format":"int64"
        }
      }
    },
    "ResponseMessage«ImportJobFile»":{
      "type":"object",
      "properties":{
        "data":{
          "$ref":"#/definitions/ImportJobFile"
        },
        "errors":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/ErrorResponse"
          }
        }
      }
    },
    "CustomerCreate":{
      "type":"object",
      "properties":{
        "contractId":{
          "type":"string"
        },
        "contractIdType":{
          "type":"string"
        },
        "createdBy":{
          "type":"string"
        },
        "customerId":{
          "type":"string"
        },
        "display":{
          "type":"string"
        }
      }
    },
    "Device":{
      "type":"object",
      "properties":{
        "createdAt":{
          "type":"string",
          "format":"date-time",
          "description":"When device was created in database"
        },
        "customer":{
          "$ref":"#/definitions/Customer"
        },
        "customerContractId":{
          "type":"string"
        },
        "customerContractIdType":{
          "type":"string"
        },
        "deviceId":{
          "type":"string",
          "description":"Public unique identifier of this device"
        },
        "deviceInfo":{
          "description":"Device info as received in the import XML",
          "$ref":"#/definitions/DeviceInfo"
        },
        "encryptionMethod":{
          "type":"string",
          "enum":[
            "NONE",
            "AES"
          ]
        },
        "secret":{
          "description":"The device's individual secret",
          "$ref":"#/definitions/Secret"
        },
        "state":{
          "type":"string",
          "enum":[
            "VACANT",
            "ACTIVE",
            "DISABLED",
            "LOST",
            "DISCONTINUED"
          ]
        },
        "time":{
          "type":"integer",
          "format":"int64"
        },
        "timeInterval":{
          "type":"integer",
          "format":"int64"
        },
        "updatedAt":{
          "type":"string",
          "format":"date-time",
          "description":"When device was updated in database"
        },
        "user":{
          "$ref":"#/definitions/User"
        }
      }
    },
    "FileImportRequestData":{
      "type":"object",
      "required":[
        "filename",
        "importedBy",
        "transportKey",
        "xml"
      ],
      "properties":{
        "filename":{
          "type":"string"
        },
        "importedBy":{
          "type":"string"
        },
        "transportKey":{
          "type":"string"
        },
        "xml":{
          "type":"string"
        }
      }
    },
    "ResponseMessage«User»":{
      "type":"object",
      "properties":{
        "data":{
          "$ref":"#/definitions/User"
        },
        "errors":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/ErrorResponse"
          }
        }
      }
    },
    "ResponseMessage«Device»":{
      "type":"object",
      "properties":{
        "data":{
          "$ref":"#/definitions/Device"
        },
        "errors":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/ErrorResponse"
          }
        }
      }
    },
    "ResponseMessage":{
      "type":"object",
      "properties":{
        "data":{
          "$ref":"#/definitions/ApiResponse"
        },
        "errors":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/ErrorResponse"
          }
        }
      }
    },
    "ImportedDevice":{
      "type":"object",
      "properties":{
        "createdAt":{
          "type":"string",
          "format":"date-time"
        },
        "deviceId":{
          "type":"string"
        },
        "encryptionMethod":{
          "type":"string",
          "enum":[
            "NONE",
            "AES"
          ]
        },
        "manufacturer":{
          "type":"string",
          "description":"The device manufacturer identifier"
        },
        "model":{
          "type":"string",
          "description":"The device model"
        },
        "reason":{
          "type":"string"
        },
        "secret":{
          "$ref":"#/definitions/Secret"
        },
        "serialNumber":{
          "type":"string",
          "description":"The device serial number"
        },
        "state":{
          "type":"string",
          "enum":[
            "CREATED",
            "IMPORTED",
            "UPDATED",
            "FAILED"
          ]
        },
        "time":{
          "type":"integer",
          "format":"int64"
        },
        "timeInterval":{
          "type":"integer",
          "format":"int64"
        },
        "updatedAt":{
          "type":"string",
          "format":"date-time"
        }
      },
      "description":"A representation of a device, as it was in the data import file"
    },
    "ErrorResponse":{
      "type":"object",
      "properties":{
        "cause":{
          "type":"object"
        },
        "code":{
          "type":"string"
        },
        "field":{
          "type":"string"
        },
        "message":{
          "type":"string"
        },
        "origin":{
          "type":"string"
        }
      }
    },
    "Secret":{
      "type":"object",
      "properties":{
        "decrypted":{
          "type":"string",
          "description":"The decrypted secret of the device, may be null when client is not allowed to see it"
        },
        "encrypted":{
          "type":"string",
          "description":"The encrypted secret of the device, may be null when client is not allowed to see it"
        }
      }
    },
    "ImportJobFile":{
      "type":"object",
      "properties":{
        "fileContent":{
          "type":"string",
          "description":"File content of the importjob's file"
        },
        "filename":{
          "type":"string",
          "description":"Filename of the stored file"
        },
        "importJobId":{
          "type":"string",
          "description":"Public and globally unique identifier of the import job in question"
        }
      },
      "description":"An import job, with its meta data and comprising devices"
    },
    "ResponseMessage«ImportJobs»":{
      "type":"object",
      "properties":{
        "data":{
          "$ref":"#/definitions/ImportJobs"
        },
        "errors":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/ErrorResponse"
          }
        }
      }
    },
    "ResponseMessage«GetDevicesResponseData»":{
      "type":"object",
      "properties":{
        "data":{
          "$ref":"#/definitions/GetDevicesResponseData"
        },
        "errors":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/ErrorResponse"
          }
        }
      }
    },
    "UserUpdate":{
      "type":"object",
      "properties":{
        "display":{
          "type":"string"
        }
      }
    },
    "DeviceUpdate":{
      "type":"object",
      "properties":{
        "customerContractId":{
          "type":"string"
        },
        "customerContractIdType":{
          "type":"string"
        },
        "state":{
          "type":"string",
          "enum":[
            "VACANT",
            "ACTIVE",
            "DISABLED",
            "LOST",
            "DISCONTINUED"
          ]
        },
        "timeInterval":{
          "type":"integer",
          "format":"int64"
        }
      }
    },
    "ImportJob":{
      "type":"object",
      "properties":{
        "batchId":{
          "type":"string",
          "description":"Public and globally unique identifier of this import"
        },
        "createdAt":{
          "type":"string",
          "format":"date-time",
          "description":"When the job was created"
        },
        "deviceCount":{
          "type":"integer",
          "format":"int32",
          "description":"The number of devices imported in this job"
        },
        "fileContent":{
          "type":"string",
          "description":"File content of the importjob"
        },
        "filename":{
          "type":"string",
          "description":"Filename of the stored file"
        },
        "importedBy":{
          "type":"string",
          "description":"Who imported the job"
        },
        "importedDevices":{
          "type":"array",
          "description":"The set of devices imported",
          "items":{
            "$ref":"#/definitions/ImportedDevice"
          }
        },
        "outcome":{
          "type":"string",
          "description":"Outcome of the job",
          "enum":[
            "NOT_DONE",
            "SUCCESS",
            "FAILED"
          ]
        },
        "state":{
          "type":"string",
          "description":"Current state of the job",
          "enum":[
            "CREATED",
            "IMPORTING",
            "COMPLETED"
          ]
        }
      },
      "description":"An import job, with its meta data and comprising devices"
    },
    "CustomerUpdate":{
      "type":"object",
      "required":[
        "contractId",
        "contractIdType",
        "updatedBy"
      ],
      "properties":{
        "contractId":{
          "type":"string"
        },
        "contractIdType":{
          "type":"string"
        },
        "display":{
          "type":"string"
        },
        "updatedBy":{
          "type":"string"
        }
      }
    }
  }
}